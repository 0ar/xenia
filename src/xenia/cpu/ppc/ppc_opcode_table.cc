// This code was autogenerated by tools/ppc-table-gen.py. Do not modify!
// clang-format off
#include <cstdint>

#include "xenia/cpu/ppc/ppc_opcode.h"
#include "xenia/cpu/ppc/ppc_opcode_info.h"

namespace xe {
namespace cpu {
namespace ppc {

#define INSTRUCTION(opcode, mnem, form, subform, group, desc) \
    {opcode, mnem, PPCOpcodeFormat::form, PPCOpcodeGroup::group, desc}
PPCOpcodeInfo ppc_opcode_table[] = {
  INSTRUCTION(0x7c000014, "addcx"       , kXO     , D_A_B_OE_Rc    , kInt, "Add Carrying"                                                               ),
  INSTRUCTION(0x7c000114, "addex"       , kXO     , D_A_B_OE_Rc    , kInt, "Add Extended"                                                               ),
  INSTRUCTION(0x38000000, "addi"        , kD      , D_A_SIMM       , kInt, "Add Immediate"                                                              ),
  INSTRUCTION(0x30000000, "addic"       , kD      , D_A_SIMM       , kInt, "Add Immediate Carrying"                                                     ),
  INSTRUCTION(0x34000000, "addicx"      , kD      , D_A_SIMM       , kInt, "Add Immediate Carrying and Record"                                          ),
  INSTRUCTION(0x3c000000, "addis"       , kD      , D_A_SIMM       , kInt, "Add Immediate Shifted"                                                      ),
  INSTRUCTION(0x7c0001d4, "addmex"      , kXO     , D_A_0_OE_Rc    , kInt, "Add to Minus One Extended"                                                  ),
  INSTRUCTION(0x7c000214, "addx"        , kXO     , D_A_B_OE_Rc    , kInt, "Add"                                                                        ),
  INSTRUCTION(0x7c000194, "addzex"      , kXO     , D_A_0_OE_Rc    , kInt, "Add to Zero Extended"                                                       ),
  INSTRUCTION(0x7c000078, "andcx"       , kX      , S_A_B_Rc       , kInt, "AND with Complement"                                                        ),
  INSTRUCTION(0x74000000, "andisx"      , kD      , S_A_UIMM       , kInt, "AND Immediate Shifted"                                                      ),
  INSTRUCTION(0x70000000, "andix"       , kD      , S_A_UIMM       , kInt, "AND Immediate"                                                              ),
  INSTRUCTION(0x7c000038, "andx"        , kX      , S_A_B_Rc       , kInt, "AND"                                                                        ),
  INSTRUCTION(0x4c000420, "bcctrx"      , kXL     , BO_BI_0_LK     , kInt, "Branch Conditional to Count Register"                                       ),
  INSTRUCTION(0x4c000020, "bclrx"       , kXL     , BO_BI_0_LK     , kInt, "Branch Conditional to Link Register"                                        ),
  INSTRUCTION(0x40000000, "bcx"         , kB      , BO_BI_BD_AA_LK , kInt, "Branch Conditional"                                                         ),
  INSTRUCTION(0x48000000, "bx"          , kI      , LI_AA_LK       , kInt, "Branch"                                                                     ),
  INSTRUCTION(0x7c000000, "cmp"         , kX      , crfD_L_A_B     , kInt, "Compare"                                                                    ),
  INSTRUCTION(0x2c000000, "cmpi"        , kD      , crfD_L_A_SIMM  , kInt, "Compare Immediate"                                                          ),
  INSTRUCTION(0x7c000040, "cmpl"        , kX      , crfD_L_A_B     , kInt, "Compare Logical"                                                            ),
  INSTRUCTION(0x28000000, "cmpli"       , kD      , crfD_L_A_UIMM  , kInt, "Compare Logical Immediate"                                                  ),
  INSTRUCTION(0x7c000074, "cntlzdx"     , kX      , S_A_0_Rc       , kInt, "Count Leading Zeros Doubleword"                                             ),
  INSTRUCTION(0x7c000034, "cntlzwx"     , kX      , S_A_0_Rc       , kInt, "Count Leading Zeros Word"                                                   ),
  INSTRUCTION(0x4c000202, "crand"       , kXL     , crbD_crbA_crbB , kInt, "Condition Register AND"                                                     ),
  INSTRUCTION(0x4c000102, "crandc"      , kXL     , crbD_crbA_crbB , kInt, "Condition Register AND with Complement"                                     ),
  INSTRUCTION(0x4c000242, "creqv"       , kXL     , crbD_crbA_crbB , kInt, "Condition Register Equivalent"                                              ),
  INSTRUCTION(0x4c0001c2, "crnand"      , kXL     , crbD_crbA_crbB , kInt, "Condition Register NAND"                                                    ),
  INSTRUCTION(0x4c000042, "crnor"       , kXL     , crbD_crbA_crbB , kInt, "Condition Register NOR"                                                     ),
  INSTRUCTION(0x4c000382, "cror"        , kXL     , crbD_crbA_crbB , kInt, "Condition Register OR"                                                      ),
  INSTRUCTION(0x4c000342, "crorc"       , kXL     , crbD_crbA_crbB , kInt, "Condition Register OR with Complement"                                      ),
  INSTRUCTION(0x4c000182, "crxor"       , kXL     , crbD_crbA_crbB , kInt, "Condition Register XOR"                                                     ),
  INSTRUCTION(0x7c0005ec, "dcba"        , kX      , _0_A_B         , kInt, "Data Cache Block Allocate"                                                  ),
  INSTRUCTION(0x7c0000ac, "dcbf"        , kX      , _0_A_B         , kInt, "Data Cache Block Flush"                                                     ),
  INSTRUCTION(0x7c0003ac, "dcbi"        , kX      , _0_A_B         , kInt, "Data Cache Block Invalidate"                                                ),
  INSTRUCTION(0x7c00006c, "dcbst"       , kX      , _0_A_B         , kInt, "Data Cache Block Store"                                                     ),
  INSTRUCTION(0x7c00022c, "dcbt"        , kX      , _0_A_B         , kInt, "Data Cache Block Touch"                                                     ),
  INSTRUCTION(0x7c0001ec, "dcbtst"      , kX      , _0_A_B         , kInt, "Data Cache Block Touch for Store"                                           ),
  INSTRUCTION(0x7c0007ec, "dcbz"        , kDCBZ   , _0_A_B         , kInt, "Data Cache Block Clear to Zero"                                             ),
  INSTRUCTION(0x7c2007ec, "dcbz128"     , kDCBZ   , _0_A_B         , kInt, "Data Cache Block Clear to Zero 128"                                         ),
  INSTRUCTION(0x7c000392, "divdux"      , kXO     , D_A_B_OE_Rc    , kInt, "Divide Doubleword Unsigned"                                                 ),
  INSTRUCTION(0x7c0003d2, "divdx"       , kXO     , D_A_B_OE_Rc    , kInt, "Divide Doubleword"                                                          ),
  INSTRUCTION(0x7c000396, "divwux"      , kXO     , D_A_B_OE_Rc    , kInt, "Divide Word Unsigned"                                                       ),
  INSTRUCTION(0x7c0003d6, "divwx"       , kXO     , D_A_B_OE_Rc    , kInt, "Divide Word"                                                                ),
  INSTRUCTION(0x7c00026c, "eciwx"       , kX      , D_A_B          , kInt, "External Control In Word Indexed"                                           ),
  INSTRUCTION(0x7c00036c, "ecowx"       , kX      , S_A_B          , kInt, "External Control Out Word Indexed"                                          ),
  INSTRUCTION(0x7c0006ac, "eieio"       , kX      , _0_0_0         , kInt, "Enforce In-Order Execution of I/O"                                          ),
  INSTRUCTION(0x7c000238, "eqvx"        , kX      , S_A_B_Rc       , kInt, "Equivalent"                                                                 ),
  INSTRUCTION(0x7c000774, "extsbx"      , kX      , S_A_0_Rc       , kInt, "Extend Sign Byte"                                                           ),
  INSTRUCTION(0x7c000734, "extshx"      , kX      , S_A_0_Rc       , kInt, "Extend Sign Half Word"                                                      ),
  INSTRUCTION(0x7c0007b4, "extswx"      , kX      , S_A_0_Rc       , kInt, "Extend Sign Word"                                                           ),
  INSTRUCTION(0xfc000210, "fabsx"       , kX      , D_0_B_Rc       , kFp , "Floating Absolute Value"                                                    ),
  INSTRUCTION(0xec00002a, "faddsx"      , kA      , D_A_B_0_Rc     , kFp , "Floating Add Single"                                                        ),
  INSTRUCTION(0xfc00002a, "faddx"       , kA      , D_A_B_0_Rc     , kFp , "Floating Add"                                                               ),
  INSTRUCTION(0xfc00069c, "fcfidx"      , kX      , D_A_B_Rc       , kFp , "Floating Convert From Integer Doubleword"                                   ),
  INSTRUCTION(0xfc000040, "fcmpo"       , kX      , crfD_A_B       , kFp , "Floating Compare Ordered"                                                   ),
  INSTRUCTION(0xfc000000, "fcmpu"       , kX      , crfD_A_B       , kFp , "Floating Compare Unordered"                                                 ),
  INSTRUCTION(0xfc00065c, "fctidx"      , kX      , D_0_B_Rc       , kFp , "Floating Convert to Integer Doubleword"                                     ),
  INSTRUCTION(0xfc00065e, "fctidzx"     , kX      , D_0_B_Rc       , kFp , "Floating Convert to Integer Doubleword with Round Toward Zero"              ),
  INSTRUCTION(0xfc00001c, "fctiwx"      , kX      , D_0_B_Rc       , kFp , "Floating Convert to Integer Word"                                           ),
  INSTRUCTION(0xfc00001e, "fctiwzx"     , kX      , D_0_B_Rc       , kFp , "Floating Convert to Integer Word with Round Toward Zero"                    ),
  INSTRUCTION(0xec000024, "fdivsx"      , kA      , D_A_B_0_Rc     , kFp , "Floating Divide Single"                                                     ),
  INSTRUCTION(0xfc000024, "fdivx"       , kA      , D_A_B_0_Rc     , kFp , "Floating Divide"                                                            ),
  INSTRUCTION(0xec00003a, "fmaddsx"     , kA      , D_A_B_C_Rc     , kFp , "Floating Multiply-Add Single"                                               ),
  INSTRUCTION(0xfc00003a, "fmaddx"      , kA      , D_A_B_C_Rc     , kFp , "Floating Multiply-Add"                                                      ),
  INSTRUCTION(0xfc000090, "fmrx"        , kX      , D_0_B_Rc       , kFp , "Floating Move Register"                                                     ),
  INSTRUCTION(0xec000038, "fmsubsx"     , kA      , D_A_B_C_Rc     , kFp , "Floating Multiply-Subtract Single"                                          ),
  INSTRUCTION(0xfc000038, "fmsubx"      , kA      , D_A_B_C_Rc     , kFp , "Floating Multiply-Subtract"                                                 ),
  INSTRUCTION(0xec000032, "fmulsx"      , kA      , D_A_0_C_Rc     , kFp , "Floating Multiply Single"                                                   ),
  INSTRUCTION(0xfc000032, "fmulx"       , kA      , D_A_0_C_Rc     , kFp , "Floating Multiply"                                                          ),
  INSTRUCTION(0xfc000110, "fnabsx"      , kX      , D_0_B_Rc       , kFp , "Floating Negative Absolute Value"                                           ),
  INSTRUCTION(0xfc000050, "fnegx"       , kX      , D_0_B_Rc       , kFp , "Floating Negate"                                                            ),
  INSTRUCTION(0xec00003e, "fnmaddsx"    , kA      , D_A_B_C_Rc     , kFp , "Floating Negative Multiply-Add Single"                                      ),
  INSTRUCTION(0xfc00003e, "fnmaddx"     , kA      , D_A_B_C_Rc     , kFp , "Floating Negative Multiply-Add"                                             ),
  INSTRUCTION(0xec00003c, "fnmsubsx"    , kA      , D_A_B_C_Rc     , kFp , "Floating Negative Multiply-Subtract Single"                                 ),
  INSTRUCTION(0xfc00003c, "fnmsubx"     , kA      , D_A_B_C_Rc     , kFp , "Floating Negative Multiply-Subtract"                                        ),
  INSTRUCTION(0xec000030, "fresx"       , kA      , D_0_B_0_Rc     , kFp , "Floating Reciprocal Estimate Single"                                        ),
  INSTRUCTION(0xfc000018, "frspx"       , kX      , D_0_B_Rc       , kFp , "Floating Round to Single"                                                   ),
  INSTRUCTION(0xfc000034, "frsqrtex"    , kA      , D_0_B_0_Rc     , kFp , "Floating Reciprocal Square Root Estimate"                                   ),
  INSTRUCTION(0xfc00002e, "fselx"       , kA      , D_A_B_C_Rc     , kFp , "Floating Select"                                                            ),
  INSTRUCTION(0xec00002c, "fsqrtsx"     , kA      , D_0_B_0_Rc     , kFp , "Floating Square Root Single"                                                ),
  INSTRUCTION(0xfc00002c, "fsqrtx"      , kA      , D_0_B_0_Rc     , kFp , "Floating Square Root"                                                       ),
  INSTRUCTION(0xec000028, "fsubsx"      , kA      , D_A_B_0_Rc     , kFp , "Floating Subtract Single"                                                   ),
  INSTRUCTION(0xfc000028, "fsubx"       , kA      , D_A_B_0_Rc     , kFp , "Floating Subtract"                                                          ),
  INSTRUCTION(0x7c0007ac, "icbi"        , kX      , _0_A_B         , kInt, "Instruction Cache Block Invalidate"                                         ),
  INSTRUCTION(0x4c00012c, "isync"       , kXL     , _0_0_0         , kInt, "Instruction Synchronize"                                                    ),
  INSTRUCTION(0x88000000, "lbz"         , kD      , D_A_d          , kInt, "Load Byte and Zero"                                                         ),
  INSTRUCTION(0x8c000000, "lbzu"        , kD      , D_A_d          , kInt, "Load Byte and Zero with Update"                                             ),
  INSTRUCTION(0x7c0000ee, "lbzux"       , kX      , D_A_B          , kInt, "Load Byte and Zero with Update Indexed"                                     ),
  INSTRUCTION(0x7c0000ae, "lbzx"        , kX      , D_A_B          , kInt, "Load Byte and Zero Indexed"                                                 ),
  INSTRUCTION(0xe8000000, "ld"          , kDS     , D_A_d          , kInt, "Load Doubleword"                                                            ),
  INSTRUCTION(0x7c0000a8, "ldarx"       , kX      , D_A_B          , kInt, "Load Doubleword and Reserve Indexed"                                        ),
  INSTRUCTION(0x7c000428, "ldbrx"       , kX      , D_A_B          , kInt, "Load Doubleword Byte-Reverse Indexed"                                       ),
  INSTRUCTION(0xe8000001, "ldu"         , kDS     , D_A_d          , kInt, "Load Doubleword with Update"                                                ),
  INSTRUCTION(0x7c00006a, "ldux"        , kX      , D_A_B          , kInt, "Load Doubleword with Update Indexed"                                        ),
  INSTRUCTION(0x7c00002a, "ldx"         , kX      , D_A_B          , kInt, "Load Doubleword Indexed"                                                    ),
  INSTRUCTION(0xc8000000, "lfd"         , kD      , D_A_d          , kFp , "Load Floating-Point Double"                                                 ),
  INSTRUCTION(0xcc000000, "lfdu"        , kD      , D_A_d          , kFp , "Load Floating-Point Double with Update"                                     ),
  INSTRUCTION(0x7c0004ee, "lfdux"       , kX      , D_A_B          , kFp , "Load Floating-Point Double with Update Indexed"                             ),
  INSTRUCTION(0x7c0004ae, "lfdx"        , kX      , D_A_B          , kFp , "Load Floating-Point Double Indexed"                                         ),
  INSTRUCTION(0xc0000000, "lfs"         , kD      , D_A_d          , kFp , "Load Floating-Point Single"                                                 ),
  INSTRUCTION(0xc4000000, "lfsu"        , kD      , D_A_d          , kFp , "Load Floating-Point Single with Update"                                     ),
  INSTRUCTION(0x7c00046e, "lfsux"       , kX      , D_A_B          , kFp , "Load Floating-Point Single with Update Indexed"                             ),
  INSTRUCTION(0x7c00042e, "lfsx"        , kX      , D_A_B          , kFp , "Load Floating-Point Single Indexed"                                         ),
  INSTRUCTION(0xa8000000, "lha"         , kD      , D_A_d          , kInt, "Load Half Word Algebraic"                                                   ),
  INSTRUCTION(0xac000000, "lhau"        , kD      , D_A_d          , kInt, "Load Half Word Algebraic with Update"                                       ),
  INSTRUCTION(0x7c0002ee, "lhaux"       , kX      , D_A_B          , kInt, "Load Half Word Algebraic with Update Indexed"                               ),
  INSTRUCTION(0x7c0002ae, "lhax"        , kX      , D_A_B          , kInt, "Load Half Word Algebraic Indexed"                                           ),
  INSTRUCTION(0x7c00062c, "lhbrx"       , kX      , D_A_B          , kInt, "Load Half Word Byte-Reverse Indexed"                                        ),
  INSTRUCTION(0xa0000000, "lhz"         , kD      , D_A_d          , kInt, "Load Half Word and Zero"                                                    ),
  INSTRUCTION(0xa4000000, "lhzu"        , kD      , D_A_d          , kInt, "Load Half Word and Zero with Update"                                        ),
  INSTRUCTION(0x7c00026e, "lhzux"       , kX      , D_A_B          , kInt, "Load Half Word and Zero with Update Indexed"                                ),
  INSTRUCTION(0x7c00022e, "lhzx"        , kX      , D_A_B          , kInt, "Load Half Word and Zero Indexed"                                            ),
  INSTRUCTION(0xb8000000, "lmw"         , kD      , D_A_d          , kInt, "Load Multiple Word"                                                         ),
  INSTRUCTION(0x7c0004aa, "lswi"        , kX      , D_A_NB         , kInt, "Load String Word Immediate"                                                 ),
  INSTRUCTION(0x7c00042a, "lswx"        , kX      , D_A_B          , kInt, "Load String Word Indexed"                                                   ),
  INSTRUCTION(0x7c00000e, "lvebx"       , kX      , D_A_B          , kVmx, "Load Vector Element Byte Indexed"                                           ),
  INSTRUCTION(0x7c00004e, "lvehx"       , kX      , D_A_B          , kVmx, "Load Vector Element Half Word Indexed"                                      ),
  INSTRUCTION(0x7c00008e, "lvewx"       , kX      , D_A_B          , kVmx, "Load Vector Element Word Indexed"                                           ),
  INSTRUCTION(0x10000083, "lvewx128"    , kVX128_1, D_A_B          , kVmx, "Load Vector Element Word Indexed 128"                                       ),
  INSTRUCTION(0x7c00040e, "lvlx"        , kX      , D_A_B          , kVmx, "Load Vector Left Indexed"                                                   ),
  INSTRUCTION(0x10000403, "lvlx128"     , kVX128_1, D_A_B          , kVmx, "Load Vector Left Indexed 128"                                               ),
  INSTRUCTION(0x7c00060e, "lvlxl"       , kX      , D_A_B          , kVmx, "Load Vector Left Indexed LRU"                                               ),
  INSTRUCTION(0x10000603, "lvlxl128"    , kVX128_1, D_A_B          , kVmx, "Load Vector Left Indexed LRU 128"                                           ),
  INSTRUCTION(0x7c00044e, "lvrx"        , kX      , D_A_B          , kVmx, "Load Vector Right Indexed"                                                  ),
  INSTRUCTION(0x10000443, "lvrx128"     , kVX128_1, D_A_B          , kVmx, "Load Vector Right Indexed 128"                                              ),
  INSTRUCTION(0x7c00064e, "lvrxl"       , kX      , D_A_B          , kVmx, "Load Vector Right Indexed LRU"                                              ),
  INSTRUCTION(0x10000643, "lvrxl128"    , kVX128_1, D_A_B          , kVmx, "Load Vector Right Indexed LRU 128"                                          ),
  INSTRUCTION(0x7c00000c, "lvsl"        , kX      , D_A_B          , kVmx, "Load Vector for Shift Left Indexed"                                         ),
  INSTRUCTION(0x10000003, "lvsl128"     , kVX128_1, D_A_B          , kVmx, "Load Vector for Shift Left Indexed 128"                                     ),
  INSTRUCTION(0x7c00004c, "lvsr"        , kX      , D_A_B          , kVmx, "Load Vector for Shift Right Indexed"                                        ),
  INSTRUCTION(0x10000043, "lvsr128"     , kVX128_1, D_A_B          , kVmx, "Load Vector for Shift Right Indexed 128"                                    ),
  INSTRUCTION(0x7c0000ce, "lvx"         , kX      , D_A_B          , kVmx, "Load Vector Indexed"                                                        ),
  INSTRUCTION(0x100000c3, "lvx128"      , kVX128_1, D_A_B          , kVmx, "Load Vector Indexed 128"                                                    ),
  INSTRUCTION(0x7c0002ce, "lvxl"        , kX      , D_A_B          , kVmx, "Load Vector Indexed LRU"                                                    ),
  INSTRUCTION(0x100002c3, "lvxl128"     , kVX128_1, D_A_B          , kVmx, "Load Vector Indexed LRU 128"                                                ),
  INSTRUCTION(0xe8000002, "lwa"         , kDS     , D_A_d          , kInt, "Load Word Algebraic"                                                        ),
  INSTRUCTION(0x7c000028, "lwarx"       , kX      , D_A_B          , kInt, "Load Word and Reserve Indexed"                                              ),
  INSTRUCTION(0x7c0002ea, "lwaux"       , kX      , D_A_B          , kInt, "Load Word Algebraic with Update Indexed"                                    ),
  INSTRUCTION(0x7c0002aa, "lwax"        , kX      , D_A_B          , kInt, "Load Word Algebraic Indexed"                                                ),
  INSTRUCTION(0x7c00042c, "lwbrx"       , kX      , D_A_B          , kInt, "Load Word Byte-Reverse Indexed"                                             ),
  INSTRUCTION(0x80000000, "lwz"         , kD      , D_A_d          , kInt, "Load Word and Zero"                                                         ),
  INSTRUCTION(0x84000000, "lwzu"        , kD      , D_A_d          , kInt, "Load Word and Zero with Update"                                             ),
  INSTRUCTION(0x7c00006e, "lwzux"       , kX      , D_A_B          , kInt, "Load Word and Zero with Update Indexed"                                     ),
  INSTRUCTION(0x7c00002e, "lwzx"        , kX      , D_A_B          , kInt, "Load Word and Zero Indexed"                                                 ),
  INSTRUCTION(0x4c000000, "mcrf"        , kXL     , crfD_crfS_0    , kInt, "Move Condition Register Field"                                              ),
  INSTRUCTION(0xfc000080, "mcrfs"       , kX      , crfD_crfS_0    , kFp , "Move to Condition Register from FPSCR"                                      ),
  INSTRUCTION(0x7c000400, "mcrxr"       , kX      , crfD_0_0       , kInt, "Move to Condition Register from XER"                                        ),
  INSTRUCTION(0x7c000026, "mfcr"        , kX      , D_0_0          , kInt, "Move from Condition Register"                                               ),
  INSTRUCTION(0xfc00048e, "mffsx"       , kX      , D_0_0_Rc       , kFp , "Move from FPSCR"                                                            ),
  INSTRUCTION(0x7c0000a6, "mfmsr"       , kX      , D_0_0          , kInt, "Move from Machine State Register"                                           ),
  INSTRUCTION(0x7c0002a6, "mfspr"       , kXFX    , D_spr          , kInt, "Move from Special-Purpose Register"                                         ),
  INSTRUCTION(0x7c0002e6, "mftb"        , kXFX    , D_tbr          , kInt, "Move from Time Base"                                                        ),
  INSTRUCTION(0x10000604, "mfvscr"      , kVX     , D_0_0          , kInt, "Move from VSCR"                                                             ),
  INSTRUCTION(0x7c000120, "mtcrf"       , kXFX    , S_CRM          , kInt, "Move to Condition Register Fields"                                          ),
  INSTRUCTION(0xfc00008c, "mtfsb0x"     , kX      , crbD_0_0_Rc    , kFp , "Move to FPSCR Bit 0"                                                        ),
  INSTRUCTION(0xfc00004c, "mtfsb1x"     , kX      , crbD_0_0_Rc    , kFp , "Move to FPSCR Bit 1"                                                        ),
  INSTRUCTION(0xfc00010c, "mtfsfix"     , kX      , crfD_0_IMM_Rc  , kFp , "Move to FPSCR Field Immediate"                                              ),
  INSTRUCTION(0xfc00058e, "mtfsfx"      , kXFL    , FM_B_Rc        , kFp , "Move to FPSCR Fields"                                                       ),
  INSTRUCTION(0x7c000124, "mtmsr"       , kX      , S_0_0          , kInt, "Move to Machine State Register"                                             ),
  INSTRUCTION(0x7c000164, "mtmsrd"      , kX      , S_0_0          , kInt, "Move to Machine State Register Doubleword"                                  ),
  INSTRUCTION(0x7c0003a6, "mtspr"       , kXFX    , S_spr          , kInt, "Move to Special-Purpose Register"                                           ),
  INSTRUCTION(0x10000644, "mtvscr"      , kVX     , S_0_0          , kInt, "Move to VSCR"                                                               ),
  INSTRUCTION(0x7c000012, "mulhdux"     , kXO     , D_A_B_Rc       , kInt, "Multiply High Doubleword Unsigned"                                          ),
  INSTRUCTION(0x7c000092, "mulhdx"      , kXO     , D_A_B_Rc       , kInt, "Multiply High Doubleword"                                                   ),
  INSTRUCTION(0x7c000016, "mulhwux"     , kXO     , D_A_B_Rc       , kInt, "Multiply High Word Unsigned"                                                ),
  INSTRUCTION(0x7c000096, "mulhwx"      , kXO     , D_A_B_Rc       , kInt, "Multiply High Word"                                                         ),
  INSTRUCTION(0x7c0001d2, "mulldx"      , kXO     , D_A_B_OE_Rc    , kInt, "Multiply Low Doubleword"                                                    ),
  INSTRUCTION(0x1c000000, "mulli"       , kD      , D_A_SIMM       , kInt, "Multiply Low Immediate"                                                     ),
  INSTRUCTION(0x7c0001d6, "mullwx"      , kXO     , D_A_B_OE_Rc    , kInt, "Multiply Low Word"                                                          ),
  INSTRUCTION(0x7c0003b8, "nandx"       , kX      , S_A_B_Rc       , kInt, "NAND"                                                                       ),
  INSTRUCTION(0x7c0000d0, "negx"        , kXO     , D_A_0_OE_Rc    , kInt, "Negate"                                                                     ),
  INSTRUCTION(0x7c0000f8, "norx"        , kX      , S_A_B_Rc       , kInt, "NOR"                                                                        ),
  INSTRUCTION(0x7c000338, "orcx"        , kX      , S_A_B_Rc       , kInt, "OR with Complement"                                                         ),
  INSTRUCTION(0x60000000, "ori"         , kD      , S_A_UIMM       , kInt, "OR Immediate"                                                               ),
  INSTRUCTION(0x64000000, "oris"        , kD      , S_A_UIMM       , kInt, "OR Immediate Shifted"                                                       ),
  INSTRUCTION(0x7c000378, "orx"         , kX      , S_A_B_Rc       , kInt, "OR"                                                                         ),
  INSTRUCTION(0x78000010, "rldclx"      , kMDS    , S_A_B_MB_ME_Rc , kInt, "Rotate Left Doubleword then Clear Left"                                     ),
  INSTRUCTION(0x78000012, "rldcrx"      , kMDS    , S_A_B_MB_ME_Rc , kInt, "Rotate Left Doubleword then Clear Right"                                    ),
  INSTRUCTION(0x78000000, "rldiclx"     , kMDSH   , S_A_SH_MB_ME_Rc, kInt, "Rotate Left Doubleword Immediate then Clear Left"                           ),
  INSTRUCTION(0x78000004, "rldicrx"     , kMDSH   , S_A_SH_MB_ME_Rc, kInt, "Rotate Left Doubleword Immediate then Clear Right"                          ),
  INSTRUCTION(0x78000008, "rldicx"      , kMDSH   , S_A_SH_MB_ME_Rc, kInt, "Rotate Left Doubleword Immediate then Clear"                                ),
  INSTRUCTION(0x7800000c, "rldimix"     , kMDSH   , S_A_SH_MB_ME_Rc, kInt, "Rotate Left Doubleword Immediate then Mask Insert"                          ),
  INSTRUCTION(0x50000000, "rlwimix"     , kM      , S_A_SH_MB_ME_Rc, kInt, "Rotate Left Word Immediate then Mask Insert"                                ),
  INSTRUCTION(0x54000000, "rlwinmx"     , kM      , S_A_SH_MB_ME_Rc, kInt, "Rotate Left Word Immediate then AND with Mask"                              ),
  INSTRUCTION(0x5c000000, "rlwnmx"      , kM      , S_A_SH_MB_ME_Rc, kInt, "Rotate Left Word then AND with Mask"                                        ),
  INSTRUCTION(0x44000002, "sc"          , kSC     , sc             , kInt, "System Call"                                                                ),
  INSTRUCTION(0x7c000036, "sldx"        , kX      , S_A_B_Rc       , kInt, "Shift Left Doubleword"                                                      ),
  INSTRUCTION(0x7c000030, "slwx"        , kX      , S_A_B_Rc       , kInt, "Shift Left Word"                                                            ),
  INSTRUCTION(0x7c000674, "sradix"      , kXS     , S_A_SH_Rc      , kInt, "Shift Right Algebraic Doubleword Immediate"                                 ),
  INSTRUCTION(0x7c000634, "sradx"       , kX      , S_A_B_Rc       , kInt, "Shift Right Algebraic Doubleword"                                           ),
  INSTRUCTION(0x7c000670, "srawix"      , kX      , S_A_SH_Rc      , kInt, "Shift Right Algebraic Word Immediate"                                       ),
  INSTRUCTION(0x7c000630, "srawx"       , kX      , S_A_B_Rc       , kInt, "Shift Right Algebraic Word"                                                 ),
  INSTRUCTION(0x7c000436, "srdx"        , kX      , S_A_B_Rc       , kInt, "Shift Right Doubleword"                                                     ),
  INSTRUCTION(0x7c000430, "srwx"        , kX      , S_A_B_Rc       , kInt, "Shift Right Word"                                                           ),
  INSTRUCTION(0x98000000, "stb"         , kD      , S_A_d          , kInt, "Store Byte"                                                                 ),
  INSTRUCTION(0x9c000000, "stbu"        , kD      , S_A_d          , kInt, "Store Byte with Update"                                                     ),
  INSTRUCTION(0x7c0001ee, "stbux"       , kX      , S_A_B          , kInt, "Store Byte with Update Indexed"                                             ),
  INSTRUCTION(0x7c0001ae, "stbx"        , kX      , S_A_B          , kInt, "Store Byte Indexed"                                                         ),
  INSTRUCTION(0xf8000000, "std"         , kDS     , S_A_d          , kInt, "Store Doubleword"                                                           ),
  INSTRUCTION(0x7c000528, "stdbrx"      , kX      , S_A_B          , kInt, "Store Doubleword Byte-Reverse Indexed"                                      ),
  INSTRUCTION(0x7c0001ad, "stdcx"       , kX      , S_A_B_1        , kInt, "Store Doubleword Conditional Indexed"                                       ),
  INSTRUCTION(0xf8000001, "stdu"        , kDS     , S_A_d          , kInt, "Store Doubleword with Update"                                               ),
  INSTRUCTION(0x7c00016a, "stdux"       , kX      , S_A_B          , kInt, "Store Doubleword with Update Indexed"                                       ),
  INSTRUCTION(0x7c00012a, "stdx"        , kX      , S_A_B          , kInt, "Store Doubleword Indexed"                                                   ),
  INSTRUCTION(0xd8000000, "stfd"        , kD      , S_A_d          , kFp , "Store Floating-Point Double"                                                ),
  INSTRUCTION(0xdc000000, "stfdu"       , kD      , S_A_d          , kFp , "Store Floating-Point Double with Update"                                    ),
  INSTRUCTION(0x7c0005ee, "stfdux"      , kX      , S_A_B          , kFp , "Store Floating-Point Double with Update Indexed"                            ),
  INSTRUCTION(0x7c0005ae, "stfdx"       , kX      , S_A_B          , kFp , "Store Floating-Point Double Indexed"                                        ),
  INSTRUCTION(0x7c0007ae, "stfiwx"      , kX      , S_A_B          , kFp , "Store Floating-Point as Integer Word Indexed"                               ),
  INSTRUCTION(0xd0000000, "stfs"        , kD      , S_A_d          , kFp , "Store Floating-Point Single"                                                ),
  INSTRUCTION(0xd4000000, "stfsu"       , kD      , S_A_d          , kFp , "Store Floating-Point Single with Update"                                    ),
  INSTRUCTION(0x7c00056e, "stfsux"      , kX      , S_A_B          , kFp , "Store Floating-Point Single with Update Indexed"                            ),
  INSTRUCTION(0x7c00052e, "stfsx"       , kX      , S_A_B          , kFp , "Store Floating-Point Single Indexed"                                        ),
  INSTRUCTION(0xb0000000, "sth"         , kD      , S_A_d          , kInt, "Store Half Word"                                                            ),
  INSTRUCTION(0x7c00072c, "sthbrx"      , kX      , S_A_B          , kInt, "Store Half Word Byte-Reverse Indexed"                                       ),
  INSTRUCTION(0xb4000000, "sthu"        , kD      , S_A_d          , kInt, "Store Half Word with Update"                                                ),
  INSTRUCTION(0x7c00036e, "sthux"       , kX      , S_A_B          , kInt, "Store Half Word with Update Indexed"                                        ),
  INSTRUCTION(0x7c00032e, "sthx"        , kX      , S_A_B          , kInt, "Store Half Word Indexed"                                                    ),
  INSTRUCTION(0xbc000000, "stmw"        , kD      , S_A_d          , kInt, "Store Multiple Word"                                                        ),
  INSTRUCTION(0x7c0005aa, "stswi"       , kX      , S_A_NB         , kInt, "Store String Word Immediate"                                                ),
  INSTRUCTION(0x7c00052a, "stswx"       , kX      , S_A_B          , kInt, "Store String Word Indexed"                                                  ),
  INSTRUCTION(0x7c00010e, "stvebx"      , kX      , S_A_B          , kVmx, "Store Vector Element Byte Indexed"                                          ),
  INSTRUCTION(0x7c00014e, "stvehx"      , kX      , S_A_B          , kVmx, "Store Vector Element Half Word Indexed"                                     ),
  INSTRUCTION(0x7c00018e, "stvewx"      , kX      , S_A_B          , kVmx, "Store Vector Element Word Indexed"                                          ),
  INSTRUCTION(0x10000183, "stvewx128"   , kVX128_1, S_A_B          , kVmx, "Store Vector Element Word Indexed 128"                                      ),
  INSTRUCTION(0x7c00050e, "stvlx"       , kX      , S_A_B          , kVmx, "Store Vector Left Indexed"                                                  ),
  INSTRUCTION(0x10000503, "stvlx128"    , kVX128_1, S_A_B          , kVmx, "Store Vector Left Indexed 128"                                              ),
  INSTRUCTION(0x7c00070e, "stvlxl"      , kX      , S_A_B          , kVmx, "Store Vector Left Indexed LRU"                                              ),
  INSTRUCTION(0x10000703, "stvlxl128"   , kVX128_1, S_A_B          , kVmx, "Store Vector Left Indexed LRU 128"                                          ),
  INSTRUCTION(0x7c00054e, "stvrx"       , kX      , S_A_B          , kVmx, "Store Vector Right Indexed"                                                 ),
  INSTRUCTION(0x10000543, "stvrx128"    , kVX128_1, S_A_B          , kVmx, "Store Vector Right Indexed 128"                                             ),
  INSTRUCTION(0x7c00074e, "stvrxl"      , kX      , S_A_B          , kVmx, "Store Vector Right Indexed LRU"                                             ),
  INSTRUCTION(0x10000743, "stvrxl128"   , kVX128_1, S_A_B          , kVmx, "Store Vector Right Indexed LRU 128"                                         ),
  INSTRUCTION(0x7c0001ce, "stvx"        , kX      , S_A_B          , kVmx, "Store Vector Indexed"                                                       ),
  INSTRUCTION(0x100001c3, "stvx128"     , kVX128_1, S_A_B          , kVmx, "Store Vector Indexed 128"                                                   ),
  INSTRUCTION(0x7c0003ce, "stvxl"       , kX      , S_A_B          , kVmx, "Store Vector Indexed LRU"                                                   ),
  INSTRUCTION(0x100003c3, "stvxl128"    , kVX128_1, S_A_B          , kVmx, "Store Vector Indexed LRU 128"                                               ),
  INSTRUCTION(0x90000000, "stw"         , kD      , S_A_d          , kInt, "Store Word"                                                                 ),
  INSTRUCTION(0x7c00052c, "stwbrx"      , kX      , S_A_B          , kInt, "Store Word Byte-Reverse Indexed"                                            ),
  INSTRUCTION(0x7c00012d, "stwcx"       , kX      , S_A_B_1        , kInt, "Store Word Conditional Indexed"                                             ),
  INSTRUCTION(0x94000000, "stwu"        , kD      , S_A_d          , kInt, "Store Word with Update"                                                     ),
  INSTRUCTION(0x7c00016e, "stwux"       , kX      , S_A_B          , kInt, "Store Word with Update Indexed"                                             ),
  INSTRUCTION(0x7c00012e, "stwx"        , kX      , S_A_B          , kInt, "Store Word Indexed"                                                         ),
  INSTRUCTION(0x7c000010, "subfcx"      , kXO     , D_A_B_OE_Rc    , kInt, "Subtract From Carrying"                                                     ),
  INSTRUCTION(0x7c000110, "subfex"      , kXO     , D_A_B_OE_Rc    , kInt, "Subtract From Extended"                                                     ),
  INSTRUCTION(0x20000000, "subficx"     , kD      , D_A_SIMM       , kInt, "Subtract From Immediate Carrying"                                           ),
  INSTRUCTION(0x7c0001d0, "subfmex"     , kXO     , D_A_0_OE_Rc    , kInt, "Subtract From Minus One Extended"                                           ),
  INSTRUCTION(0x7c000050, "subfx"       , kXO     , D_A_B_OE_Rc    , kInt, "Subtract From"                                                              ),
  INSTRUCTION(0x7c000190, "subfzex"     , kXO     , D_A_0_OE_Rc    , kInt, "Subtract From Zero Extended"                                                ),
  INSTRUCTION(0x7c0004ac, "sync"        , kX      , _0_0_0         , kInt, "Synchronize"                                                                ),
  INSTRUCTION(0x7c000088, "td"          , kX      , TO_A_B         , kInt, "Trap Doubleword"                                                            ),
  INSTRUCTION(0x08000000, "tdi"         , kD      , TO_A_SIMM      , kInt, "Trap Doubleword Immediate"                                                  ),
  INSTRUCTION(0x7c000008, "tw"          , kX      , TO_A_B         , kInt, "Trap Word"                                                                  ),
  INSTRUCTION(0x0c000000, "twi"         , kD      , TO_A_SIMM      , kInt, "Trap Word Immediate"                                                        ),
  INSTRUCTION(0x10000180, "vaddcuw"     , kVX     , D_A_B          , kVmx, "Vector Add Carryout Unsigned Word"                                          ),
  INSTRUCTION(0x1000000a, "vaddfp"      , kVX     , D_A_B          , kVmx, "Vector Add Floating Point"                                                  ),
  INSTRUCTION(0x14000010, "vaddfp128"   , kVX128  , D_A_B          , kVmx, "Vector128 Add Floating Point"                                               ),
  INSTRUCTION(0x10000300, "vaddsbs"     , kVX     , D_A_B          , kVmx, "Vector Add Signed Byte Saturate"                                            ),
  INSTRUCTION(0x10000340, "vaddshs"     , kVX     , D_A_B          , kVmx, "Vector Add Signed Half Word Saturate"                                       ),
  INSTRUCTION(0x10000380, "vaddsws"     , kVX     , D_A_B          , kVmx, "Vector Add Signed Word Saturate"                                            ),
  INSTRUCTION(0x10000000, "vaddubm"     , kVX     , D_A_B          , kVmx, "Vector Add Unsigned Byte Modulo"                                            ),
  INSTRUCTION(0x10000200, "vaddubs"     , kVX     , D_A_B          , kVmx, "Vector Add Unsigned Byte Saturate"                                          ),
  INSTRUCTION(0x10000040, "vadduhm"     , kVX     , D_A_B          , kVmx, "Vector Add Unsigned Half Word Modulo"                                       ),
  INSTRUCTION(0x10000240, "vadduhs"     , kVX     , D_A_B          , kVmx, "Vector Add Unsigned Half Word Saturate"                                     ),
  INSTRUCTION(0x10000080, "vadduwm"     , kVX     , D_A_B          , kVmx, "Vector Add Unsigned Word Modulo"                                            ),
  INSTRUCTION(0x10000280, "vadduws"     , kVX     , D_A_B          , kVmx, "Vector Add Unsigned Word Saturate"                                          ),
  INSTRUCTION(0x10000404, "vand"        , kVX     , D_A_B          , kVmx, "Vector Logical AND"                                                         ),
  INSTRUCTION(0x14000210, "vand128"     , kVX128  , D_A_B          , kVmx, "Vector128 Logical AND"                                                      ),
  INSTRUCTION(0x10000444, "vandc"       , kVX     , D_A_B          , kVmx, "Vector Logical AND with Complement"                                         ),
  INSTRUCTION(0x14000250, "vandc128"    , kVX128  , D_A_B          , kVmx, "Vector128 Logical AND with Complement"                                      ),
  INSTRUCTION(0x10000502, "vavgsb"      , kVX     , D_A_B          , kVmx, "Vector Average Signed Byte"                                                 ),
  INSTRUCTION(0x10000542, "vavgsh"      , kVX     , D_A_B          , kVmx, "Vector Average Signed Half Word"                                            ),
  INSTRUCTION(0x10000582, "vavgsw"      , kVX     , D_A_B          , kVmx, "Vector Average Signed Word"                                                 ),
  INSTRUCTION(0x10000402, "vavgub"      , kVX     , D_A_B          , kVmx, "Vector Average Unsigned Byte"                                               ),
  INSTRUCTION(0x10000442, "vavguh"      , kVX     , D_A_B          , kVmx, "Vector Average Unsigned Half Word"                                          ),
  INSTRUCTION(0x10000482, "vavguw"      , kVX     , D_A_B          , kVmx, "Vector Average Unsigned Word"                                               ),
  INSTRUCTION(0x18000230, "vcfpsxws128" , kVX128_3, D_B_SIMM       , kVmx, "Vector128 Convert From Floating-Point to Signed Fixed-Point Word Saturate"  ),
  INSTRUCTION(0x18000270, "vcfpuxws128" , kVX128_3, D_B_UIMM       , kVmx, "Vector128 Convert From Floating-Point to Unsigned Fixed-Point Word Saturate"),
  INSTRUCTION(0x1000034a, "vcfsx"       , kVX     , D_A_B          , kVmx, "Vector Convert from Signed Fixed-Point Word"                                ),
  INSTRUCTION(0x1000030a, "vcfux"       , kVX     , D_A_B          , kVmx, "Vector Convert from Unsigned Fixed-Point Word"                              ),
  INSTRUCTION(0x100003c6, "vcmpbfp"     , kVC     , D_A_B          , kVmx, "Vector Compare Bounds Floating Point"                                       ),
  INSTRUCTION(0x18000180, "vcmpbfp128"  , kVX128_R, D_A_B          , kVmx, "Vector128 Compare Bounds Floating Point"                                    ),
  INSTRUCTION(0x100000c6, "vcmpeqfp"    , kVC     , D_A_B          , kVmx, "Vector Compare Equal-to Floating Point"                                     ),
  INSTRUCTION(0x18000000, "vcmpeqfp128" , kVX128_R, D_A_B          , kVmx, "Vector128 Compare Equal-to Floating Point"                                  ),
  INSTRUCTION(0x10000006, "vcmpequb"    , kVC     , D_A_B          , kVmx, "Vector Compare Equal-to Unsigned Byte"                                      ),
  INSTRUCTION(0x10000046, "vcmpequh"    , kVC     , D_A_B          , kVmx, "Vector Compare Equal-to Unsigned Half Word"                                 ),
  INSTRUCTION(0x10000086, "vcmpequw"    , kVC     , D_A_B          , kVmx, "Vector Compare Equal-to Unsigned Word"                                      ),
  INSTRUCTION(0x18000200, "vcmpequw128" , kVX128_R, D_A_B          , kVmx, "Vector128 Compare Equal-to Unsigned Word"                                   ),
  INSTRUCTION(0x100001c6, "vcmpgefp"    , kVC     , D_A_B          , kVmx, "Vector Compare Greater-Than-or-Equal-to Floating Point"                     ),
  INSTRUCTION(0x18000080, "vcmpgefp128" , kVX128_R, D_A_B          , kVmx, "Vector128 Compare Greater-Than-or-Equal-to Floating Point"                  ),
  INSTRUCTION(0x100002c6, "vcmpgtfp"    , kVC     , D_A_B          , kVmx, "Vector Compare Greater-Than Floating Point"                                 ),
  INSTRUCTION(0x18000100, "vcmpgtfp128" , kVX128_R, D_A_B          , kVmx, "Vector128 Compare Greater-Than Floating-Point"                              ),
  INSTRUCTION(0x10000306, "vcmpgtsb"    , kVC     , D_A_B          , kVmx, "Vector Compare Greater-Than Signed Byte"                                    ),
  INSTRUCTION(0x10000346, "vcmpgtsh"    , kVC     , D_A_B          , kVmx, "Vector Compare Greater-Than Signed Half Word"                               ),
  INSTRUCTION(0x10000386, "vcmpgtsw"    , kVC     , D_A_B          , kVmx, "Vector Compare Greater-Than Signed Word"                                    ),
  INSTRUCTION(0x10000206, "vcmpgtub"    , kVC     , D_A_B          , kVmx, "Vector Compare Greater-Than Unsigned Byte"                                  ),
  INSTRUCTION(0x10000246, "vcmpgtuh"    , kVC     , D_A_B          , kVmx, "Vector Compare Greater-Than Unsigned Half Word"                             ),
  INSTRUCTION(0x10000286, "vcmpgtuw"    , kVC     , D_A_B          , kVmx, "Vector Compare Greater-Than Unsigned Word"                                  ),
  INSTRUCTION(0x180002b0, "vcsxwfp128"  , kVX128_3, D_B_SIMM       , kVmx, "Vector128 Convert From Signed Fixed-Point Word to Floating-Point"           ),
  INSTRUCTION(0x100003ca, "vctsxs"      , kVX     , D_A_B          , kVmx, "Vector Convert to Signed Fixed-Point Word Saturate"                         ),
  INSTRUCTION(0x1000038a, "vctuxs"      , kVX     , D_A_B          , kVmx, "Vector Convert to Unsigned Fixed-Point Word Saturate"                       ),
  INSTRUCTION(0x180002f0, "vcuxwfp128"  , kVX128_3, D_B_SIMM       , kVmx, "Vector128 Convert From Unsigned Fixed-Point Word to Floating-Point"         ),
  INSTRUCTION(0x1000018a, "vexptefp"    , kVX     , D_A_B          , kVmx, "Vector 2 Raised to the Exponent Estimate Floating Point"                    ),
  INSTRUCTION(0x180006b0, "vexptefp128" , kVX128_3, D_B            , kVmx, "Vector128 Log2 Estimate Floating Point"                                     ),
  INSTRUCTION(0x100001ca, "vlogefp"     , kVX     , D_A_B          , kVmx, "Vector Log2 Estimate Floating Point"                                        ),
  INSTRUCTION(0x180006f0, "vlogefp128"  , kVX128_3, D_B            , kVmx, "Vector128 Log2 Estimate Floating Point"                                     ),
  INSTRUCTION(0x14000110, "vmaddcfp128" , kVX128  , D_A_D_B        , kVmx, "Vector128 Multiply Add Floating Point"                                      ),
  INSTRUCTION(0x1000002e, "vmaddfp"     , kVA     , D_A_B_C        , kVmx, "Vector Multiply-Add Floating Point"                                         ),
  INSTRUCTION(0x140000d0, "vmaddfp128"  , kVX128  , D_A_D_B        , kVmx, "Vector128 Multiply Add Floating Point"                                      ),
  INSTRUCTION(0x1000040a, "vmaxfp"      , kVX     , D_A_B          , kVmx, "Vector Maximum Floating Point"                                              ),
  INSTRUCTION(0x18000280, "vmaxfp128"   , kVX128  , D_A_B          , kVmx, "Vector128 Maximum Floating Point"                                           ),
  INSTRUCTION(0x10000102, "vmaxsb"      , kVX     , D_A_B          , kVmx, "Vector Maximum Signed Byte"                                                 ),
  INSTRUCTION(0x10000142, "vmaxsh"      , kVX     , D_A_B          , kVmx, "Vector Maximum Signed Half Word"                                            ),
  INSTRUCTION(0x10000182, "vmaxsw"      , kVX     , D_A_B          , kVmx, "Vector Maximum Signed Word"                                                 ),
  INSTRUCTION(0x10000002, "vmaxub"      , kVX     , D_A_B          , kVmx, "Vector Maximum Unsigned Byte"                                               ),
  INSTRUCTION(0x10000042, "vmaxuh"      , kVX     , D_A_B          , kVmx, "Vector Maximum Unsigned Half Word"                                          ),
  INSTRUCTION(0x10000082, "vmaxuw"      , kVX     , D_A_B          , kVmx, "Vector Maximum Unsigned Word"                                               ),
  INSTRUCTION(0x10000020, "vmhaddshs"   , kVA     , D_A_B_C        , kVmx, "Vector Multiply-High and Add Signed Signed Half Word Saturate"              ),
  INSTRUCTION(0x10000021, "vmhraddshs"  , kVA     , D_A_B_C        , kVmx, "Vector Multiply-High Round and Add Signed Signed Half Word Saturate"        ),
  INSTRUCTION(0x1000044a, "vminfp"      , kVX     , D_A_B          , kVmx, "Vector Minimum Floating Point"                                              ),
  INSTRUCTION(0x180002c0, "vminfp128"   , kVX128  , D_A_B          , kVmx, "Vector128 Minimum Floating Point"                                           ),
  INSTRUCTION(0x10000302, "vminsb"      , kVX     , D_A_B          , kVmx, "Vector Minimum Signed Byte"                                                 ),
  INSTRUCTION(0x10000342, "vminsh"      , kVX     , D_A_B          , kVmx, "Vector Minimum Signed Half Word"                                            ),
  INSTRUCTION(0x10000382, "vminsw"      , kVX     , D_A_B          , kVmx, "Vector Minimum Signed Word"                                                 ),
  INSTRUCTION(0x10000202, "vminub"      , kVX     , D_A_B          , kVmx, "Vector Minimum Unsigned Byte"                                               ),
  INSTRUCTION(0x10000242, "vminuh"      , kVX     , D_A_B          , kVmx, "Vector Minimum Unsigned Half Word"                                          ),
  INSTRUCTION(0x10000282, "vminuw"      , kVX     , D_A_B          , kVmx, "Vector Minimum Unsigned Word"                                               ),
  INSTRUCTION(0x10000022, "vmladduhm"   , kVA     , D_A_B_C        , kVmx, "Vector Multiply-Low and Add Unsigned Half Word Modulo"                      ),
  INSTRUCTION(0x1000000c, "vmrghb"      , kVX     , D_A_B          , kVmx, "Vector Merge High Byte"                                                     ),
  INSTRUCTION(0x1000004c, "vmrghh"      , kVX     , D_A_B          , kVmx, "Vector Merge High Half Word"                                                ),
  INSTRUCTION(0x1000008c, "vmrghw"      , kVX     , D_A_B          , kVmx, "Vector Merge High Word"                                                     ),
  INSTRUCTION(0x18000300, "vmrghw128"   , kVX128  , D_A_B          , kVmx, "Vector128 Merge High Word"                                                  ),
  INSTRUCTION(0x1000010c, "vmrglb"      , kVX     , D_A_B          , kVmx, "Vector Merge Low Byte"                                                      ),
  INSTRUCTION(0x1000014c, "vmrglh"      , kVX     , D_A_B          , kVmx, "Vector Merge Low Half Word"                                                 ),
  INSTRUCTION(0x1000018c, "vmrglw"      , kVX     , D_A_B          , kVmx, "Vector Merge Low Word"                                                      ),
  INSTRUCTION(0x18000340, "vmrglw128"   , kVX128  , D_A_B          , kVmx, "Vector128 Merge Low Word"                                                   ),
  INSTRUCTION(0x14000190, "vmsum3fp128" , kVX128  , D_A_B          , kVmx, "Vector128 Multiply Sum 3-way Floating Point"                                ),
  INSTRUCTION(0x140001d0, "vmsum4fp128" , kVX128  , D_A_B          , kVmx, "Vector128 Multiply Sum 4-way Floating-Point"                                ),
  INSTRUCTION(0x10000025, "vmsummbm"    , kVA     , D_A_B_C        , kVmx, "Vector Multiply-Sum Mixed-Sign Byte Modulo"                                 ),
  INSTRUCTION(0x10000028, "vmsumshm"    , kVA     , D_A_B_C        , kVmx, "Vector Multiply-Sum Signed Half Word Modulo"                                ),
  INSTRUCTION(0x10000029, "vmsumshs"    , kVA     , D_A_B_C        , kVmx, "Vector Multiply-Sum Signed Half Word Saturate"                              ),
  INSTRUCTION(0x10000024, "vmsumubm"    , kVA     , D_A_B_C        , kVmx, "Vector Multiply-Sum Unsigned Byte Modulo"                                   ),
  INSTRUCTION(0x10000026, "vmsumuhm"    , kVA     , D_A_B_C        , kVmx, "Vector Multiply-Sum Unsigned Half Word Modulo"                              ),
  INSTRUCTION(0x10000027, "vmsumuhs"    , kVA     , D_A_B_C        , kVmx, "Vector Multiply-Sum Unsigned Half Word Saturate"                            ),
  INSTRUCTION(0x10000308, "vmulesb"     , kVX     , D_A_B          , kVmx, "Vector Multiply Even Signed Byte"                                           ),
  INSTRUCTION(0x10000348, "vmulesh"     , kVX     , D_A_B          , kVmx, "Vector Multiply Even Signed Half Word"                                      ),
  INSTRUCTION(0x10000208, "vmuleub"     , kVX     , D_A_B          , kVmx, "Vector Multiply Even Unsigned Byte"                                         ),
  INSTRUCTION(0x10000248, "vmuleuh"     , kVX     , D_A_B          , kVmx, "Vector Multiply Even Unsigned Half Word"                                    ),
  INSTRUCTION(0x14000090, "vmulfp128"   , kVX128  , D_A_B          , kVmx, "Vector128 Multiply Floating-Point"                                          ),
  INSTRUCTION(0x10000108, "vmulosb"     , kVX     , D_A_B          , kVmx, "Vector Multiply Odd Signed Byte"                                            ),
  INSTRUCTION(0x10000148, "vmulosh"     , kVX     , D_A_B          , kVmx, "Vector Multiply Odd Signed Half Word"                                       ),
  INSTRUCTION(0x10000008, "vmuloub"     , kVX     , D_A_B          , kVmx, "Vector Multiply Odd Unsigned Byte"                                          ),
  INSTRUCTION(0x10000048, "vmulouh"     , kVX     , D_A_B          , kVmx, "Vector Multiply Odd Unsigned Half Word"                                     ),
  INSTRUCTION(0x1000002f, "vnmsubfp"    , kVA     , D_A_B_C        , kVmx, "Vector Negative Multiply-Subtract Floating Point"                           ),
  INSTRUCTION(0x14000150, "vnmsubfp128" , kVX128  , D_A_B          , kVmx, "Vector128 Negative Multiply-Subtract Floating Point"                        ),
  INSTRUCTION(0x10000504, "vnor"        , kVX     , D_A_B          , kVmx, "Vector Logical NOR"                                                         ),
  INSTRUCTION(0x14000290, "vnor128"     , kVX128  , D_A_B          , kVmx, "Vector128 Logical NOR"                                                      ),
  INSTRUCTION(0x10000484, "vor"         , kVX     , D_A_B          , kVmx, "Vector Logical OR"                                                          ),
  INSTRUCTION(0x140002d0, "vor128"      , kVX128  , D_A_B          , kVmx, "Vector128 Logical OR"                                                       ),
  INSTRUCTION(0x1000002b, "vperm"       , kVA     , D_A_B_C        , kVmx, "Vector Permute"                                                             ),
  INSTRUCTION(0x14000000, "vperm128"    , kVX128_2, D_A_B_C        , kVmx, "Vector128 Permute"                                                          ),
  INSTRUCTION(0x18000210, "vpermwi128"  , kVX128_P, D_A_B_C        , kVmx, "Vector128 Permutate Word Immediate"                                         ),
  INSTRUCTION(0x18000610, "vpkd3d128"   , kVX128_4, D_B            , kVmx, "Vector128 Pack D3Dtype, Rotate Left Immediate and Mask Insert"              ),
  INSTRUCTION(0x1000030e, "vpkpx"       , kVX     , D_A_B          , kVmx, "Vector Pack Pixel"                                                          ),
  INSTRUCTION(0x1000018e, "vpkshss"     , kVX     , D_A_B          , kVmx, "Vector Pack Signed Half Word Signed Saturate"                               ),
  INSTRUCTION(0x14000200, "vpkshss128"  , kVX128  , D_A_B          , kVmx, "Vector128 Pack Signed Half Word Signed Saturate"                            ),
  INSTRUCTION(0x1000010e, "vpkshus"     , kVX     , D_A_B          , kVmx, "Vector Pack Signed Half Word Unsigned Saturate"                             ),
  INSTRUCTION(0x14000240, "vpkshus128"  , kVX128  , D_A_B          , kVmx, "Vector128 Pack Signed Half Word Unsigned Saturate"                          ),
  INSTRUCTION(0x100001ce, "vpkswss"     , kVX     , D_A_B          , kVmx, "Vector Pack Signed Word Signed Saturate"                                    ),
  INSTRUCTION(0x14000280, "vpkswss128"  , kVX128  , D_A_B          , kVmx, "Vector128 Pack Signed Word Signed Saturate"                                 ),
  INSTRUCTION(0x1000014e, "vpkswus"     , kVX     , D_A_B          , kVmx, "Vector Pack Signed Word Unsigned Saturate"                                  ),
  INSTRUCTION(0x140002c0, "vpkswus128"  , kVX128  , D_A_B          , kVmx, "Vector128 Pack Signed Word Unsigned Saturate"                               ),
  INSTRUCTION(0x1000000e, "vpkuhum"     , kVX     , D_A_B          , kVmx, "Vector Pack Unsigned Half Word Unsigned Modulo"                             ),
  INSTRUCTION(0x14000300, "vpkuhum128"  , kVX128  , D_A_B          , kVmx, "Vector128 Pack Unsigned Half Word Unsigned Modulo"                          ),
  INSTRUCTION(0x1000008e, "vpkuhus"     , kVX     , D_A_B          , kVmx, "Vector Pack Unsigned Half Word Unsigned Saturate"                           ),
  INSTRUCTION(0x14000340, "vpkuhus128"  , kVX128  , D_A_B          , kVmx, "Vector128 Pack Unsigned Half Word Unsigned Saturate"                        ),
  INSTRUCTION(0x1000004e, "vpkuwum"     , kVX     , D_A_B          , kVmx, "Vector Pack Unsigned Word Unsigned Modulo"                                  ),
  INSTRUCTION(0x14000380, "vpkuwum128"  , kVX128  , D_A_B          , kVmx, "Vector128 Pack Unsigned Word Unsigned Modulo"                               ),
  INSTRUCTION(0x100000ce, "vpkuwus"     , kVX     , D_A_B          , kVmx, "Vector Pack Unsigned Word Unsigned Saturate"                                ),
  INSTRUCTION(0x140003c0, "vpkuwus128"  , kVX128  , D_A_B          , kVmx, "Vector128 Pack Unsigned Word Unsigned Saturate"                             ),
  INSTRUCTION(0x1000010a, "vrefp"       , kVX     , D_A_B          , kVmx, "Vector Reciprocal Estimate Floating Point"                                  ),
  INSTRUCTION(0x18000630, "vrefp128"    , kVX128_3, D_B            , kVmx, "Vector128 Reciprocal Estimate Floating Point"                               ),
  INSTRUCTION(0x100002ca, "vrfim"       , kVX     , D_A_B          , kVmx, "Vector Round to Floating-Point Integer toward -Infinity"                    ),
  INSTRUCTION(0x18000330, "vrfim128"    , kVX128_3, D_B            , kVmx, "Vector128 Round to Floating-Point Integer toward -Infinity"                 ),
  INSTRUCTION(0x1000020a, "vrfin"       , kVX     , D_A_B          , kVmx, "Vector Round to Floating-Point Integer Nearest"                             ),
  INSTRUCTION(0x18000370, "vrfin128"    , kVX128_3, D_B            , kVmx, "Vector128 Round to Floating-Point Integer Nearest"                          ),
  INSTRUCTION(0x1000028a, "vrfip"       , kVX     , D_A_B          , kVmx, "Vector Round to Floating-Point Integer toward +Infinity"                    ),
  INSTRUCTION(0x180003b0, "vrfip128"    , kVX128_3, D_B            , kVmx, "Vector128 Round to Floating-Point Integer toward +Infinity"                 ),
  INSTRUCTION(0x1000024a, "vrfiz"       , kVX     , D_A_B          , kVmx, "Vector Round to Floating-Point Integer toward Zero"                         ),
  INSTRUCTION(0x180003f0, "vrfiz128"    , kVX128_3, D_B            , kVmx, "Vector128 Round to Floating-Point Integer toward Zero"                      ),
  INSTRUCTION(0x10000004, "vrlb"        , kVX     , D_A_B          , kVmx, "Vector Rotate Left Integer Byte"                                            ),
  INSTRUCTION(0x10000044, "vrlh"        , kVX     , D_A_B          , kVmx, "Vector Rotate Left Integer Half Word"                                       ),
  INSTRUCTION(0x18000710, "vrlimi128"   , kVX128_4, D_B_UIMM       , kVmx, "Vector128 Rotate Left Immediate and Mask Insert"                            ),
  INSTRUCTION(0x10000084, "vrlw"        , kVX     , D_A_B          , kVmx, "Vector Rotate Left Integer Word"                                            ),
  INSTRUCTION(0x18000050, "vrlw128"     , kVX128  , D_A_B          , kVmx, "Vector128 Rotate Left Word"                                                 ),
  INSTRUCTION(0x1000014a, "vrsqrtefp"   , kVX     , D_A_B          , kVmx, "Vector Reciprocal Square Root Estimate Floating Point"                      ),
  INSTRUCTION(0x18000670, "vrsqrtefp128", kVX128_3, D_B            , kVmx, "Vector128 Reciprocal Square Root Estimate Floating Point"                   ),
  INSTRUCTION(0x1000002a, "vsel"        , kVA     , D_A_B_C        , kVmx, "Vector Conditional Select"                                                  ),
  INSTRUCTION(0x14000350, "vsel128"     , kVX128  , D_A_B_D        , kVmx, "Vector128 Conditional Select"                                               ),
  INSTRUCTION(0x100001c4, "vsl"         , kVX     , D_A_B          , kVmx, "Vector Shift Left"                                                          ),
  INSTRUCTION(0x10000104, "vslb"        , kVX     , D_A_B          , kVmx, "Vector Shift Left Integer Byte"                                             ),
  INSTRUCTION(0x1000002c, "vsldoi"      , kVA     , D_A_B_C        , kVmx, "Vector Shift Left Double by Octet Immediate"                                ),
  INSTRUCTION(0x10000010, "vsldoi128"   , kVX128_5, D_A_B_I        , kVmx, "Vector128 Shift Left Double by Octet Immediate"                             ),
  INSTRUCTION(0x10000144, "vslh"        , kVX     , D_A_B          , kVmx, "Vector Shift Left Integer Half Word"                                        ),
  INSTRUCTION(0x1000040c, "vslo"        , kVX     , D_A_B          , kVmx, "Vector Shift Left by Octet"                                                 ),
  INSTRUCTION(0x14000390, "vslo128"     , kVX128  , D_A_B          , kVmx, "Vector128 Shift Left Octet"                                                 ),
  INSTRUCTION(0x10000184, "vslw"        , kVX     , D_A_B          , kVmx, "Vector Shift Left Integer Word"                                             ),
  INSTRUCTION(0x180000d0, "vslw128"     , kVX128  , D_A_B          , kVmx, "Vector128 Shift Left Integer Word"                                          ),
  INSTRUCTION(0x1000020c, "vspltb"      , kVX     , D_A_B          , kVmx, "Vector Splat Byte"                                                          ),
  INSTRUCTION(0x1000024c, "vsplth"      , kVX     , D_A_B          , kVmx, "Vector Splat Half Word"                                                     ),
  INSTRUCTION(0x1000030c, "vspltisb"    , kVX     , D_A_B          , kVmx, "Vector Splat Immediate Signed Byte"                                         ),
  INSTRUCTION(0x1000034c, "vspltish"    , kVX     , D_A_B          , kVmx, "Vector Splat Immediate Signed Half Word"                                    ),
  INSTRUCTION(0x1000038c, "vspltisw"    , kVX     , D_A_B          , kVmx, "Vector Splat Immediate Signed Word"                                         ),
  INSTRUCTION(0x18000770, "vspltisw128" , kVX128_3, D_B_SIMM       , kVmx, "Vector128 Splat Immediate Signed Word"                                      ),
  INSTRUCTION(0x1000028c, "vspltw"      , kVX     , D_A_B          , kVmx, "Vector Splat Word"                                                          ),
  INSTRUCTION(0x18000730, "vspltw128"   , kVX128_3, D_B_SIMM       , kVmx, "Vector128 Splat Word"                                                       ),
  INSTRUCTION(0x100002c4, "vsr"         , kVX     , D_A_B          , kVmx, "Vector Shift Right"                                                         ),
  INSTRUCTION(0x10000304, "vsrab"       , kVX     , D_A_B          , kVmx, "Vector Shift Right Algebraic Byte"                                          ),
  INSTRUCTION(0x10000344, "vsrah"       , kVX     , D_A_B          , kVmx, "Vector Shift Right Algebraic Half Word"                                     ),
  INSTRUCTION(0x10000384, "vsraw"       , kVX     , D_A_B          , kVmx, "Vector Shift Right Algebraic Word"                                          ),
  INSTRUCTION(0x18000150, "vsraw128"    , kVX128  , D_A_B          , kVmx, "Vector128 Shift Right Arithmetic Word"                                      ),
  INSTRUCTION(0x10000204, "vsrb"        , kVX     , D_A_B          , kVmx, "Vector Shift Right Byte"                                                    ),
  INSTRUCTION(0x10000244, "vsrh"        , kVX     , D_A_B          , kVmx, "Vector Shift Right Half Word"                                               ),
  INSTRUCTION(0x1000044c, "vsro"        , kVX     , D_A_B          , kVmx, "Vector Shift Right Octet"                                                   ),
  INSTRUCTION(0x140003d0, "vsro128"     , kVX128  , D_A_B          , kVmx, "Vector128 Shift Right Octet"                                                ),
  INSTRUCTION(0x10000284, "vsrw"        , kVX     , D_A_B          , kVmx, "Vector Shift Right Word"                                                    ),
  INSTRUCTION(0x180001d0, "vsrw128"     , kVX128  , D_A_B          , kVmx, "Vector128 Shift Right Word"                                                 ),
  INSTRUCTION(0x10000580, "vsubcuw"     , kVX     , D_A_B          , kVmx, "Vector Subtract Carryout Unsigned Word"                                     ),
  INSTRUCTION(0x1000004a, "vsubfp"      , kVX     , D_A_B          , kVmx, "Vector Subtract Floating Point"                                             ),
  INSTRUCTION(0x14000050, "vsubfp128"   , kVX128  , D_A_B          , kVmx, "Vector128 Subtract Floating Point"                                          ),
  INSTRUCTION(0x10000700, "vsubsbs"     , kVX     , D_A_B          , kVmx, "Vector Subtract Signed Byte Saturate"                                       ),
  INSTRUCTION(0x10000740, "vsubshs"     , kVX     , D_A_B          , kVmx, "Vector Subtract Signed Half Word Saturate"                                  ),
  INSTRUCTION(0x10000780, "vsubsws"     , kVX     , D_A_B          , kVmx, "Vector Subtract Signed Word Saturate"                                       ),
  INSTRUCTION(0x10000400, "vsububm"     , kVX     , D_A_B          , kVmx, "Vector Subtract Unsigned Byte Modulo"                                       ),
  INSTRUCTION(0x10000600, "vsububs"     , kVX     , D_A_B          , kVmx, "Vector Subtract Unsigned Byte Saturate"                                     ),
  INSTRUCTION(0x10000440, "vsubuhm"     , kVX     , D_A_B          , kVmx, "Vector Subtract Unsigned Half Word Modulo"                                  ),
  INSTRUCTION(0x10000640, "vsubuhs"     , kVX     , D_A_B          , kVmx, "Vector Subtract Unsigned Half Word Saturate"                                ),
  INSTRUCTION(0x10000480, "vsubuwm"     , kVX     , D_A_B          , kVmx, "Vector Subtract Unsigned Word Modulo"                                       ),
  INSTRUCTION(0x10000680, "vsubuws"     , kVX     , D_A_B          , kVmx, "Vector Subtract Unsigned Word Saturate"                                     ),
  INSTRUCTION(0x10000688, "vsum2sws"    , kVX     , D_A_B          , kVmx, "Vector Sum Across Partial (1/2) Signed Word Saturate"                       ),
  INSTRUCTION(0x10000708, "vsum4sbs"    , kVX     , D_A_B          , kVmx, "Vector Sum Across Partial (1/4) Signed Byte Saturate"                       ),
  INSTRUCTION(0x10000648, "vsum4shs"    , kVX     , D_A_B          , kVmx, "Vector Sum Across Partial (1/4) Signed Half Word Saturate"                  ),
  INSTRUCTION(0x10000608, "vsum4ubs"    , kVX     , D_A_B          , kVmx, "Vector Sum Across Partial (1/4) Unsigned Byte Saturate"                     ),
  INSTRUCTION(0x10000788, "vsumsws"     , kVX     , D_A_B          , kVmx, "Vector Sum Across Signed Word Saturate"                                     ),
  INSTRUCTION(0x180007f0, "vupkd3d128"  , kVX128_3, D_B_SIMM       , kVmx, "Vector128 Unpack D3Dtype"                                                   ),
  INSTRUCTION(0x1000034e, "vupkhpx"     , kVX     , D_A_B          , kVmx, "Vector Unpack High Pixel"                                                   ),
  INSTRUCTION(0x1000020e, "vupkhsb"     , kVX     , D_A_B          , kVmx, "Vector Unpack High Signed Byte"                                             ),
  INSTRUCTION(0x18000380, "vupkhsb128"  , kVX128  , D_B            , kVmx, "Vector128 Unpack High Signed Byte"                                          ),
  INSTRUCTION(0x1000024e, "vupkhsh"     , kVX     , D_A_B          , kVmx, "Vector Unpack High Signed Half Word"                                        ),
  INSTRUCTION(0x100003ce, "vupklpx"     , kVX     , D_A_B          , kVmx, "Vector Unpack Low Pixel"                                                    ),
  INSTRUCTION(0x1000028e, "vupklsb"     , kVX     , D_A_B          , kVmx, "Vector Unpack Low Signed Byte"                                              ),
  INSTRUCTION(0x180003c0, "vupklsb128"  , kVX128  , D_B            , kVmx, "Vector128 Unpack Low Signed Byte"                                           ),
  INSTRUCTION(0x100002ce, "vupklsh"     , kVX     , D_A_B          , kVmx, "Vector Unpack Low Signed Half Word"                                         ),
  INSTRUCTION(0x100004c4, "vxor"        , kVX     , D_A_B          , kVmx, "Vector Logical XOR"                                                         ),
  INSTRUCTION(0x14000310, "vxor128"     , kVX128  , D_A_B          , kVmx, "Vector128 Logical XOR"                                                      ),
  INSTRUCTION(0x68000000, "xori"        , kD      , S_A_UIMM       , kInt, "XOR Immediate"                                                              ),
  INSTRUCTION(0x6c000000, "xoris"       , kD      , S_A_UIMM       , kInt, "XOR Immediate Shifted"                                                      ),
  INSTRUCTION(0x7c000278, "xorx"        , kX      , S_A_B_Rc       , kInt, "XOR"                                                                        ),
};
static_assert(sizeof(ppc_opcode_table) / sizeof(PPCOpcodeInfo) == static_cast<int>(PPCOpcode::kInvalid), "PPC table mismatch - rerun ppc-table-gen");

const PPCOpcodeInfo& GetOpcodeInfo(PPCOpcode opcode) {
  return ppc_opcode_table[static_cast<int>(opcode)];
}

}  // namespace ppc
}  // namespace cpu
}  // namespace xe
